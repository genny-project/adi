package life.genny.rules;

import life.genny.qwandaq.utils.BaseEntityUtils;
import life.genny.qwandaq.entity.BaseEntity;
import life.genny.qwandaq.Answer;
import life.genny.qwandaq.Answers;
import life.genny.qwandaq.models.GennyToken;
import life.genny.qwandaq.datatype.Allowed;
import life.genny.qwandaq.rules.RuleDetails;
import life.genny.qwandaq.message.QDataAnswerMessage;
import life.genny.qwandaq.utils.CapabilityUtils;

rule "PROCESS_ANSWERS"
ruleflow-group 'DataProcessing'
salience 10000
no-loop true
when
	userToken : GennyToken ( code != "PER_SERVICE" ) 
	serviceToken : GennyToken ( code == "PER_SERVICE" ) 
	dataMsg : QDataAnswerMessage( (items != null) && (items.length > 0) && (aliasCode != "STATELESS") && (aliasCode != "IMPORT") )
	capabilityUtils : CapabilityUtils()
then
	System.out.println("Rule -> "+drools.getRule().getName()+" Processing Answer/Data!!! :  user=" + userToken.getUserCode()); 

	if (dataMsg.getItems()!=null) {
		Integer count = dataMsg.getItems().length;
		Integer index=1;
		for (Answer answer : dataMsg.getItems()) {

			/* force inference from the user to be off. This ensures that if this flag is set it is from internal */
			if(!answer.getInferred()){
				answer.setInferred(false);
			}
			insert(answer);
			System.out.println("Process Answers: inserted answer "+index+" of "+count+" "+answer.getTargetCode()+":"+answer.getAttributeCode()); 
			index++;
		}
	}
	System.out.println("Completed PROCESS_ANSWERS RULE"); 
	/* stop this rule from firing again */
	retract(dataMsg);
end
