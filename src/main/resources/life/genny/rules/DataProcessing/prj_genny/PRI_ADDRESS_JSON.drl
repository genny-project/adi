package life.genny.rules;

import life.genny.qwandaq.utils.BaseEntityUtils;
import life.genny.qwandaq.entity.BaseEntity;
import life.genny.qwandaq.Answer;
import life.genny.qwandaq.Answers;
import life.genny.qwandaq.models.GennyToken;
import life.genny.qwandaq.datatype.Allowed;
import life.genny.qwandaq.rules.RuleDetails;
import life.genny.qwandaq.utils.HttpUtils;
import javax.json.bind.Jsonb;
import javax.json.JsonObject;


rule "PRI_ADDRESS_JSON"
ruleflow-group 'DataProcessing'
salience 500 
when
	beUtils : BaseEntityUtils()
	serviceToken : GennyToken( code == "PER_SERVICE")
	userToken : GennyToken( code != "PER_SERVICE")  
	answer : Answer( attributeCode == "PRI_ADDRESS_JSON" )
	answersToSave : Answers()
	jsonb : Jsonb()
then
	System.out.println("Rule -> PRI_ADDRESS_JSON :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer); 
	String sourceCode = beUtils.getGennyToken().getUserCode();
	String targetCode = answer.getTargetCode();

	JsonObject addressDataJson = jsonb.fromJson(answer.getValue(), JsonObject.class);
	String postcode = addressDataJson.getString("postal_code");
	if (postcode == null) {
		postcode = addressDataJson.getString("postcode");
	}

	answersToSave.add(new Answer(sourceCode, targetCode, "PRI_ADDRESS_JSON", answer.getValue(),false,true));	
	answersToSave.add(new Answer(sourceCode, targetCode, "PRI_ADDRESS_COUNTRY", addressDataJson.getString("country"),false,true));
	answersToSave.add(new Answer(sourceCode, targetCode, "PRI_ADDRESS_POSTCODE",postcode,false,true));
	answersToSave.add(new Answer(sourceCode, targetCode, "PRI_ADDRESS_SUBURB", addressDataJson.getString("suburb"),false,true));
	answersToSave.add(new Answer(sourceCode, targetCode, "PRI_ADDRESS_CITY", addressDataJson.getString("suburb"),false,true));
	answersToSave.add(new Answer(sourceCode, targetCode, "PRI_ADDRESS_STATE", addressDataJson.getString("state"),false,true));
	answersToSave.add(new Answer(sourceCode, targetCode, "PRI_ADDRESS_ADDRESS1", addressDataJson.getString("street_address"),false,true));
	Answer addressFull = new Answer(sourceCode, targetCode, "PRI_ADDRESS_FULL", addressDataJson.getString("full_address"),false,true);
	answersToSave.add(addressFull);

	Double latitude = addressDataJson.getJsonNumber("latitude").doubleValue();
	Double longitude = addressDataJson.getJsonNumber("longitude").doubleValue();

	answersToSave.add(new Answer(sourceCode, targetCode, "PRI_ADDRESS_LATITUDE", latitude+"",false,true));
	answersToSave.add(new Answer(sourceCode, targetCode, "PRI_ADDRESS_LONGITUDE", longitude+"",false,true));

	/* update timezone from GPS */
	BaseEntity project = beUtils.getBaseEntityByCode("PRJ_"+serviceToken.getRealm().toUpperCase());
	String googleApiKey = project.getValueAsString("ENV_GOOGLE_MAPS_APIKEY");
	String url = "https://maps.googleapis.com/maps/api/timezone/json?location="+latitude+","+longitude+"&timestamp="+java.time.Instant.now().getEpochSecond()+"&key="+googleApiKey;
	String timezoneJsonStr = HttpUtils.get(url, userToken.getToken()).body();

	JsonObject json = jsonb.fromJson(timezoneJsonStr, JsonObject.class);
	String timezoneID = json.getString("timeZoneId");
	Answer fixedTimezone = new Answer(sourceCode,targetCode, "PRI_TIMEZONE_ID", timezoneID,false,true);			
	answersToSave.add(fixedTimezone);
	QwandaUtils.sendToFrontEnd(userToken, fixedTimezone);


	retract(answer);
end
